/**
 * @fileoverview
 * This script analyzes performance data by parsing JSONL (JSON Lines) files representing "before" and "after" performance metrics.
 * It calculates average memory usage and execution times, and determines the absolute and percentage differences between
 * the two datasets. The results are logged to the console.
 *
 * Usage:
 * - Place the input JSONL files named `before-perf.jsonl` and `after-perf.jsonl` in the same directory as the script.
 * - Run the script using Node.js to view the performance metrics and their differences.
 *
 * Generated by ChatGPT
 */

const fs = require("fs");

function parseJSONL(filePath) {
  const lines = fs.readFileSync(filePath, "utf-8").split("\n").filter(Boolean);
  return lines.map((line) => JSON.parse(line));
}

function aggregateAndAverage(data) {
  const memoryMetrics = {};
  const executionTimes = [];

  data.forEach((entry) => {
    if (entry.kiType === "PERF_MEM") {
      const memoryUsage = entry.memoryUsage;
      for (const key in memoryUsage) {
        if (!memoryMetrics[key]) {
          memoryMetrics[key] = [];
        }
        memoryMetrics[key].push(memoryUsage[key]);
      }
    } else if (entry.kiType === "PERF_EXEC") {
      executionTimes.push(entry.elapsedTime);
    }
  });

  // Calculate averages
  const memoryAvg = {};
  for (const key in memoryMetrics) {
    const values = memoryMetrics[key];
    memoryAvg[key] = values.reduce((sum, val) => sum + val, 0) / values.length;
  }

  const executionTimeAvg = executionTimes.reduce((sum, val) => sum + val, 0) / executionTimes.length;

  return { memoryAvg, executionTimeAvg };
}

// Function to calculate absolute and percentage differences
function calculateDiff(before, after) {
  const absDiff = {};
  const percDiff = {};

  for (const key in before) {
    absDiff[key] = after[key] - before[key];
    percDiff[key] =
      before[key] !== 0 ? ((absDiff[key] / before[key]) * 100).toFixed(2) : "N/A";
  }

  return { absDiff, percDiff };
}

// Main function
function main() {
  const beforeFilePath = "before-perf.jsonl";
  const afterFilePath = "after-perf.jsonl";

  const beforeData = parseJSONL(beforeFilePath);
  const afterData = parseJSONL(afterFilePath);

  const beforeResults = aggregateAndAverage(beforeData);
  const afterResults = aggregateAndAverage(afterData);

  console.log("Before:");
  console.log("Memory Usage (avg):", beforeResults.memoryAvg);
  console.log("Execution Time (avg):", beforeResults.executionTimeAvg);

  console.log("\nAfter:");
  console.log("Memory Usage (avg):", afterResults.memoryAvg);
  console.log("Execution Time (avg):", afterResults.executionTimeAvg);

  // Calculate differences for memory usage
  const memoryDiff = calculateDiff(
    beforeResults.memoryAvg,
    afterResults.memoryAvg
  );

  console.log("\nMemory Usage Difference:");
  console.log("Absolute Diff:", memoryDiff.absDiff);
  console.log("Percentage Diff:", memoryDiff.percDiff);

  // Calculate differences for execution time
  const executionTimeDiff = calculateDiff(
    { executionTime: beforeResults.executionTimeAvg },
    { executionTime: afterResults.executionTimeAvg }
  );

  console.log("\nExecution Time Difference:");
  console.log("Absolute Diff:", executionTimeDiff.absDiff);
  console.log("Percentage Diff:", executionTimeDiff.percDiff);
}

main();
